{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/endpoint-display/endpoint-display.component.ts","webpack:///src/app/components/endpoint-display/endpoint-display.component.html","webpack:///src/app/components/example-request-response/example-request-response.component.ts","webpack:///src/app/components/example-request-response/example-request-response.component.html","webpack:///src/app/components/example/example.component.ts","webpack:///src/app/components/example/example.component.html","webpack:///src/app/components/inpatient-endpoints/inpatient-endpoints.component.ts","webpack:///src/app/components/inpatient-endpoints/inpatient-endpoints.component.html","webpack:///src/app/components/outpatient-endpoints/outpatient-endpoints.component.ts","webpack:///src/app/components/outpatient-endpoints/outpatient-endpoints.component.html","webpack:///src/app/models/apc-description.model.ts","webpack:///src/app/models/drg-description.model.ts","webpack:///src/app/models/inpatient-charge-description.model.ts","webpack:///src/app/models/outpatient-charge-description.model.ts","webpack:///src/app/models/request-response.model.ts","webpack:///src/app/services/endpoint.service.ts","webpack:///src/app/services/example.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","pathMatch","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","EndpointDisplayComponent","endpointService","objectDetailsAvailable","columnHeaders","endpointData","responseObjectData","loadEndpointData","loadResponseObjectDescription","endpointDataArray","Object","entries","endpointProperty","forEach","entry","push","data","objectData","getResponseObjectDetails","objectName","getResponseObjectName","responseObjectDataArray","ExampleRequestResponseComponent","ExampleComponent","exampleService","requestResponse","getEndpointUrl","subscribe","url","getInpatientStates","statesArray","response","states","state","selectedState","selectedCity","drgs","selectedDrgId","getInpatientCitiesOperativeUrl","getInpatientCities","citiesArray","cities","city","getInpatientDrgsOperativeUrl","getDrgs","drgsArray","drgId","getInpatientChargesOperativeUrl","getInpatientCharges","charges","InpatientEndpointsComponent","getInpatientEndpoints","endpointsArray","endpoints","OutpatientEndpointsComponent","getOutpatientEndpoints","ApcDescription","apcId","apcDefinition","DrgDescription","drgDefinition","InpatientChargeDescription","hospital","address","avgCharges","avgPayments","avgMedicarePayments","OutpatientChargeDescription","RequestResponse","EndpointService","http","getEndpoints","pipe","filter","endpoint","type","find","substring","indexOf","concat","toString","getDrgDescription","getApcDescription","getInpatientChargeDescription","getOutpatientChargeDescription","get","ExampleService","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { InpatientEndpointsComponent } from './components/inpatient-endpoints/inpatient-endpoints.component';\nimport { OutpatientEndpointsComponent } from './components/outpatient-endpoints/outpatient-endpoints.component';\nimport { ExampleComponent } from './components/example/example.component';\n\n/**\n * The array of routes for the application\n */\nconst routes: Routes = [\n  { path: 'inpatient', component: InpatientEndpointsComponent },\n  { path: 'outpatient', component: OutpatientEndpointsComponent },\n  { path: 'example', component: ExampleComponent },\n  { path: '', pathMatch: 'full', redirectTo: '/inpatient' }\n];\n\n/**\n * Establishes the routes for the API doc\n */\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n/**\n * Displays the Hospital Charges API Documentation page.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Hospital Charges API Doc';\n}\n","<mat-toolbar color=\"primary\">\n  <div  class=\"header-row\">\n    <span>Hospital Charges API</span>\n    <span class=\"header-space\"></span>\n    <a href=\"http://healthcare-topics.com/comparehospitalcharges\" mat-button class=\"mat-button\">Compare Hospital Charges</a>\n  </div>\n</mat-toolbar>\n<nav mat-tab-nav-bar>\n  <a mat-tab-link\n     [routerLink]=\"['/inpatient']\"\n     routerLinkActive #rla=\"routerLinkActive\"\n     [active]=\"rla.isActive\">\n    Inpatient Endpoints\n  </a>\n  <a mat-tab-link\n     [routerLink]=\"['/outpatient']\"\n     routerLinkActive #rla2=\"routerLinkActive\"\n     [active]=\"rla2.isActive\">\n    Outpatient Endpoints\n  </a>\n  <a mat-tab-link\n     [routerLink]=\"['/example']\"\n     routerLinkActive #rla3=\"routerLinkActive\"\n     [active]=\"rla3.isActive\">\n    Example\n  </a>\n</nav>\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table'\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { InpatientEndpointsComponent } from './components/inpatient-endpoints/inpatient-endpoints.component';\nimport { OutpatientEndpointsComponent } from './components/outpatient-endpoints/outpatient-endpoints.component';\nimport { EndpointService } from './services/endpoint.service';\nimport { EndpointDisplayComponent } from './components/endpoint-display/endpoint-display.component';\nimport { ExampleComponent } from './components/example/example.component';\nimport { ExampleRequestResponseComponent } from './components/example-request-response/example-request-response.component';\nimport { ExampleService } from './services/example.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InpatientEndpointsComponent,\n    OutpatientEndpointsComponent,\n    EndpointDisplayComponent,\n    ExampleComponent,\n    ExampleRequestResponseComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MatDividerModule,\n    MatButtonModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule\n  ],\n  providers: [\n    EndpointService,\n    ExampleService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { EndpointService } from 'src/app/services/endpoint.service';\n\n/**\n * Displays the information for an endpoint.\n */\n@Component({\n  selector: 'app-endpoint-display',\n  templateUrl: './endpoint-display.component.html',\n  styleUrls: ['./endpoint-display.component.css']\n})\nexport class EndpointDisplayComponent implements OnInit {\n\n  /**\n   * The input data\n   */\n  @Input() endpointProperty: Endpoint;\n\n  /**\n   * Indicates whether or not additional response details are available.\n   */\n  public objectDetailsAvailable = false;\n\n  /**\n   * The name for the response object\n   */\n  public objectName: string;\n\n  /**\n   * The column headers\n   */\n  public columnHeaders = ['endpointInformation', 'value'];\n\n  /**\n   * The data for the table\n   */\n  public endpointData = new MatTableDataSource<[string, string]>();\n\n  /**\n   * The data for a response object\n   */\n  public responseObjectData = new MatTableDataSource<[string, string]>();\n\n  /**\n   * Sets the endpoint service.\n   * \n   * @param endpointService the endpoint service\n   */\n  constructor(private endpointService: EndpointService) { }\n\n  /**\n   * Sets the values for the data to display\n   */\n  ngOnInit(): void {\n    this.loadEndpointData();\n    this.loadResponseObjectDescription();\n  }\n\n  /**\n   * Loads the endpoint information to display.\n   */\n  private loadEndpointData() {\n    let endpointDataArray = [];\n    Object.entries(this.endpointProperty).forEach(entry => {\n      endpointDataArray.push({ \"endpointInformation\": entry[0], \"value\": entry[1] });\n    });\n    this.endpointData.data = endpointDataArray;\n  }\n\n  /**\n   * Loads the response object information to display.\n   */\n  private loadResponseObjectDescription() {\n    let objectData = this.endpointService.getResponseObjectDetails(this.endpointProperty.title);\n    if (objectData) {\n      this.objectDetailsAvailable = true;\n      this.objectName = this.endpointService.getResponseObjectName(this.endpointProperty.title);\n      let responseObjectDataArray = [];\n      Object.entries(objectData).forEach(entry => {\n        responseObjectDataArray.push({ \"endpointInformation\": entry[0], \"value\": entry[1] });\n      });\n      this.responseObjectData.data = responseObjectDataArray;\n    } else {\n      this.objectDetailsAvailable = false;\n    }\n  }\n}\n","<mat-card class=\"endpoint-card\">\n    <mat-card-header>\n        <mat-card-title>{{endpointProperty.title}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-table [dataSource]=\"endpointData\">\n            <ng-container matColumnDef=\"endpointInformation\">\n                <mat-header-cell class=\"left-column\" style=\"width: 10%;\" *matHeaderCellDef> Endpoint Information\n                </mat-header-cell>\n                <mat-cell class=\"left-column\" *matCellDef=\"let element\"> {{element.endpointInformation}} </mat-cell>\n            </ng-container>\n\n            <ng-container matColumnDef=\"value\">\n                <mat-header-cell *matHeaderCellDef> Value </mat-header-cell>\n                <mat-cell *matCellDef=\"let element\"> {{element.value}} </mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"columnHeaders\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: columnHeaders;\"></mat-row>\n        </mat-table>\n    </mat-card-content>\n</mat-card>\n<mat-card class=\"endpoint-card\" *ngIf=\"objectDetailsAvailable\">\n    <mat-card-header>\n        <mat-card-title>{{objectName}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-table [dataSource]=\"responseObjectData\">\n            <ng-container matColumnDef=\"endpointInformation\">\n                <mat-header-cell class=\"left-column\" style=\"width: 10%;\" *matHeaderCellDef> Response Object Information\n                </mat-header-cell>\n                <mat-cell class=\"left-column\" *matCellDef=\"let element\"> {{element.endpointInformation}} </mat-cell>\n            </ng-container>\n\n            <ng-container matColumnDef=\"value\">\n                <mat-header-cell *matHeaderCellDef> Value </mat-header-cell>\n                <mat-cell *matCellDef=\"let element\"> {{element.value}} </mat-cell>\n            </ng-container>\n\n            <mat-header-row *matHeaderRowDef=\"columnHeaders\"></mat-header-row>\n            <mat-row *matRowDef=\"let row; columns: columnHeaders;\"></mat-row>\n        </mat-table>\n    </mat-card-content>\n</mat-card>","import { Component, OnInit, Input } from '@angular/core';\nimport { RequestResponse } from 'src/app/models/request-response.model';\n\n/**\n * Displays the request and response of an example call.\n */\n@Component({\n  selector: 'app-example-request-response',\n  templateUrl: './example-request-response.component.html',\n  styleUrls: ['./example-request-response.component.css']\n})\nexport class ExampleRequestResponseComponent implements OnInit {\n\n  /**\n   * The property provided by the parent component\n   */\n  @Input('data') requestResponse: RequestResponse;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-card>\n    <mat-card-header>\n        <mat-card-title>Request and Response</mat-card-title>\n    </mat-card-header>\n    <mat-card-content class=\"request-response-content\">\n        <h4>URL</h4>\n        <p><a *ngIf=\"requestResponse\" href=\"{{requestResponse.url}}\" target=\"_blank\">{{requestResponse.url}}</a></p>\n        <h4>Response</h4>\n        <pre class=\"response-content\" *ngIf=\"requestResponse\">{{requestResponse.response | json}}</pre>\n    </mat-card-content>\n</mat-card>\n","import { Component, OnInit } from '@angular/core';\nimport { ExampleService } from 'src/app/services/example.service';\nimport { EndpointService } from 'src/app/services/endpoint.service';\nimport { RequestResponse } from 'src/app/models/request-response.model';\nimport { DiagnosisRelatedGroup } from 'src/app/models/diagnosis-related-group.model';\n\n/**\n * Displays the example client functionality.\n */\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent implements OnInit {\n\n  /**\n   * The model for request and response\n   */\n  requestResponse: RequestResponse;\n\n  /**\n   * The inpatient states\n   */\n  states: string[];\n\n  /**\n   * The selected state\n   */\n  selectedState: string;\n\n  /**\n   * The inpatient cities\n   */\n  cities: string[];\n\n  /**\n   * The selected city\n   */\n  selectedCity: string;\n\n  /**\n   * The diagnosis-related groups\n   */\n  drgs: DiagnosisRelatedGroup[];\n\n  /**\n   * The selected diagnosis-related group\n   */\n  selectedDrgId: number;\n\n  /**\n   * Injects the services and creates the RequestResponse object.\n   * \n   * @param exampleService the example service\n   * @param endpointService the endpoint service\n   */\n  constructor(private exampleService: ExampleService, private endpointService: EndpointService) {\n    this.requestResponse = new RequestResponse();\n  }\n\n  /**\n   * Retrieves inpatient states and sets the request and response data.\n   */\n  ngOnInit(): void {\n    this.endpointService.getEndpointUrl(\"Inpatient States\").subscribe(url => this.requestResponse.url = url);\n    this.exampleService.getInpatientStates().subscribe(statesArray => {\n      this.requestResponse.response = statesArray;\n      this.states = statesArray;\n    });\n  }\n\n  /**\n   * Retrieves inpatient cities for the given state and sets the request and response data.\n   * \n   * @param state the chosen state abbreviation\n   */\n  getInpatientCities(state: string) {\n    this.selectedState = state;\n    this.selectedCity = null;\n    this.drgs = null;\n    this.selectedDrgId = null;\n    this.endpointService.getInpatientCitiesOperativeUrl(this.selectedState)\n      .subscribe(url => this.requestResponse.url = url);\n    this.exampleService.getInpatientCities(this.selectedState)\n      .subscribe(citiesArray => {\n        this.requestResponse.response = citiesArray;\n        this.cities = citiesArray;\n      });\n  }\n\n  /**\n   * Retrieves diagnosis-related groups for the given city and sets the request and response data.\n   * \n   * @param city the chosen city name\n   */\n  getDrgs(city: string) {\n    this.selectedCity = city;\n    this.drgs = null;\n    this.selectedDrgId = null;\n    this.endpointService.getInpatientDrgsOperativeUrl(this.selectedState, this.selectedCity)\n      .subscribe(url => this.requestResponse.url = url);\n    this.exampleService.getDrgs(this.selectedState, this.selectedCity)\n      .subscribe(drgsArray => {\n        this.requestResponse.response = drgsArray;\n        this.drgs = drgsArray;\n      });\n  }\n\n  /**\n   * Retrieves the inpatient charges for the given DRG.\n   * \n   * @param drgId the chosen diagnosis-related group ID\n   */\n  getInpatientCharges(drgId: number) {\n    this.selectedDrgId = drgId;\n    this.endpointService.getInpatientChargesOperativeUrl(this.selectedState, this.selectedCity, this.selectedDrgId)\n      .subscribe(url => this.requestResponse.url = url);\n    this.exampleService.getInpatientCharges(this.selectedState, this.selectedCity, this.selectedDrgId)\n      .subscribe(charges => {\n        this.requestResponse.response = charges;\n      });\n  }\n\n}\n","<div class=\"example-container\">\n    <mat-card class=\"example-input-card\">\n        <mat-card-header>\n            <mat-card-title>Example Client</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <h4>State and City</h4>\n            <mat-form-field appearance=\"fill\">\n                <mat-label>Choose a state</mat-label>\n                <mat-select placeholder=\"\" (selectionChange)=\"getInpatientCities($event.value)\">\n                    <mat-option *ngFor=\"let state of states\" [value]=\"state\">{{state}}</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div *ngIf=\"cities\">\n                <mat-form-field appearance=\"fill\">\n                    <mat-label>Choose a city</mat-label>\n                    <mat-select placeholder=\"\" (selectionChange)=\"getDrgs($event.value)\">\n                        <mat-option *ngFor=\"let city of cities\" [value]=\"city\">{{city}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div *ngIf=\"drgs\">\n                <h4>Diagnosis-Related Group</h4>\n                <mat-form-field class=\"drg-select\" appearance=\"fill\">\n                    <mat-label>Choose a diagnosis-related group</mat-label>\n                    <mat-select placeholder=\"\" (selectionChange)=\"getInpatientCharges($event.value)\">\n                        <mat-option *ngFor=\"let drg of drgs\" [value]=\"drg.drgId\">{{drg.drgDefinition}}</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </mat-card-content>\n    </mat-card>\n    <mat-divider [vertical]=\"true\"></mat-divider>\n    <app-example-request-response class=\"example-request-response\" [data]=\"requestResponse\">\n    </app-example-request-response>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { EndpointService } from 'src/app/services/endpoint.service';\nimport { Endpoint } from 'src/app/models/endpoint.model';\n\n/**\n * Displays the accordion view of inpatient endpoints.\n */\n@Component({\n  selector: 'app-inpatient-endpoints',\n  templateUrl: './inpatient-endpoints.component.html',\n  styleUrls: ['./inpatient-endpoints.component.css']\n})\nexport class InpatientEndpointsComponent implements OnInit {\n\n  endpoints: Endpoint[];\n\n  constructor(private endpointService: EndpointService) { }\n\n  ngOnInit(): void {\n    this.endpointService.getInpatientEndpoints().subscribe(endpointsArray => this.endpoints = endpointsArray);\n  }\n}\n","<p>\n    The Hospital Charges API provides a hypertext-driven process for\n    retrieving regional inpatient and outpatient hospital charge data.\n    The following list of methods describes the endpoints that can be \n    used to retrieve inpatient data.\n</p>\n<mat-expansion-panel *ngFor=\"let endpoint of endpoints\">\n    <mat-expansion-panel-header>\n        <mat-panel-title>\n            {{endpoint.title}}\n        </mat-panel-title>\n        <mat-panel-description>\n            {{endpoint.description}}\n        </mat-panel-description>\n    </mat-expansion-panel-header>\n    <app-endpoint-display [endpointProperty]=\"endpoint\"></app-endpoint-display>\n</mat-expansion-panel>","import { Component, OnInit } from '@angular/core';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { EndpointService } from 'src/app/services/endpoint.service';\n\n/**\n * Displays the accordion view of outpatient endpoints.\n */\n@Component({\n  selector: 'app-outpatient-endpoints',\n  templateUrl: './outpatient-endpoints.component.html',\n  styleUrls: ['./outpatient-endpoints.component.css']\n})\nexport class OutpatientEndpointsComponent implements OnInit {\n\n  endpoints: Endpoint[];\n\n  constructor(private endpointService: EndpointService) { }\n\n  ngOnInit(): void {\n    this.endpointService.getOutpatientEndpoints().subscribe(endpointsArray => this.endpoints = endpointsArray);\n  }\n\n}\n","<p>\n    The Hospital Charges API provides a hypertext-driven process for\n    retrieving regional inpatient and outpatient hospital charge data.\n    The following list of methods describes the endpoints that can be \n    used to retrieve outpatient data.\n</p>\n<mat-expansion-panel *ngFor=\"let endpoint of endpoints\">\n    <mat-expansion-panel-header>\n        <mat-panel-title>\n            {{endpoint.title}}\n        </mat-panel-title>\n        <mat-panel-description>\n            {{endpoint.description}}\n        </mat-panel-description>\n    </mat-expansion-panel-header>\n    <app-endpoint-display [endpointProperty]=\"endpoint\"></app-endpoint-display>\n</mat-expansion-panel>","/**\n * Describes the object representing an ambulatory payment classification.\n */\nexport class ApcDescription {\n    constructor(\n        public apcId: string,\n        public apcDefinition: string\n    ) { }\n}\n","/**\n * Describes the object representing a diagnosis-related group.\n */\nexport class DrgDescription {\n    constructor(\n        public drgId: string,\n        public drgDefinition: string\n    ) { }\n}\n","/**\n * Describes the object for inpatient hospital charge data.\n */\nexport class InpatientChargeDescription {\n    constructor(\n        public hospital: string,\n        public address: string,\n        public avgCharges: string,\n        public avgPayments: string,\n        public avgMedicarePayments: string\n    ) { }\n}\n","/**\n * Describes the object for outpatient hospital charge data.\n */\nexport class OutpatientChargeDescription {\n    constructor(\n        public hospital: string,\n        public address: string,\n        public avgCharges: string,\n        public avgPayments: string\n    ) { }\n}\n","/**\n * Holds the values for a request and a response.\n */\nexport class RequestResponse {\n    url: string;\n    response: any;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from \"rxjs/operators\";\nimport { Endpoint } from '../models/endpoint.model';\nimport { InpatientChargeDescription } from '../models/inpatient-charge-description.model';\nimport { DrgDescription } from '../models/drg-description.model';\nimport { ApcDescription } from '../models/apc-description.model';\nimport { OutpatientChargeDescription } from '../models/outpatient-charge-description.model';\n\n/**\n * Provides information on the API endpoints.\n */\n@Injectable()\nexport class EndpointService {\n\n    /**\n     * Injects the HttpClient object.\n     * \n     * @param http the HttpClient object\n     */\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Returns the list of inpatient endpoints.\n     * \n     * @return the inpatient endpoints\n     * @return the list of inpatient endpoints\n     */\n    public getInpatientEndpoints(): Observable<Endpoint[]> {\n        return this.getEndpoints()\n            .pipe(map(endpointsArray => endpointsArray.filter(endpoint => endpoint.type === \"inpatient\")));\n    }\n\n    /**\n     * Returns the list of outpatient endpoints.\n     * \n     * @return the outpatient endpoints\n     * @return the list of outpatient endpoints\n     */\n    public getOutpatientEndpoints(): Observable<Array<Endpoint>> {\n        return this.getEndpoints()\n            .pipe(map(endpointsArray => endpointsArray.filter(endpoint => endpoint.type === \"outpatient\")));\n    }\n\n    /**\n     * Returns the URL of the endpoint with the matching title. The URL returned \n     * contains placeholders and is used for display only.\n     * \n     * @param title the endpoint title to match \n     * @return the URL to display for the given title\n     */\n    public getEndpointUrl(title: string): Observable<string> {\n        return this.getEndpoints()\n            .pipe(map(endpointsArray => endpointsArray.find(endpoint => endpoint.title === title).url));\n    }\n\n    /**\n     * Returns the URL of the endpoint to retrieve cities with inpatient charges.\n     * \n     * @param state the stateAbbreviation URL parameter \n     * @return the URL to find cities\n     */\n    public getInpatientCitiesOperativeUrl(state: string): Observable<string> {\n        return this.getEndpointUrl(\"Inpatient Cities\")\n            .pipe(map(url => url.substring(0, url.indexOf(\"{\")).concat(state)));\n    }\n\n    /**\n     * Returns the URL of the endpoint to retrieve diagnosis-related groups.\n     * \n     * @param state the stateAbbreviation URL parameter \n     * @param city the city URL parameter\n     * @return the URL to find DRGs\n     */\n    public getInpatientDrgsOperativeUrl(state: string, city: string): Observable<string> {\n        return this.getEndpointUrl(\"Diagnosis-Related Groups\")\n            .pipe(map(url => url.substring(0, url.indexOf(\"{\")).concat(state).concat(\"/\").concat(city)));\n    }\n\n    /**\n     * Returns the URL of the endpoint to retrieve inpatient charges.\n     * \n     * @param state the stateAbbreviation URL parameter \n     * @param city the city URL parameter\n     * @param drgId the DRG ID URL parameter\n     * @return the URL to find inpatient charges\n     */\n    public getInpatientChargesOperativeUrl(state: string, city: string, drgId: number): Observable<string> {\n        return this.getEndpointUrl(\"Inpatient Charges\")\n            .pipe(map(url => url.substring(0, url.indexOf(\"{\"))\n                .concat(state).concat(\"/\").concat(city).concat(\"/\").concat(drgId.toString())));\n    }\n\n    /**\n     * Returns the appropriate response object details for the \n     * given endpoint title.\n     * \n     * @param title the endpoint title\n     * @return the response description\n     */\n    public getResponseObjectDetails(title: string): any {\n        if (title === \"Diagnosis-Related Groups\") {\n            return this.getDrgDescription();\n        } else if (title === \"Ambulatory Payment Classifications\") {\n            return this.getApcDescription();\n        } else if (title === \"Inpatient Charges\") {\n            return this.getInpatientChargeDescription();\n        } else if (title === \"Outpatient Charges\") {\n            return this.getOutpatientChargeDescription();\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the appropriate response object name for the \n     * given endpoint title.\n     * \n     * @param title the endpoint title\n     * @return the object name for the endpoint\n     */\n    public getResponseObjectName(title: string): any {\n        if (title === \"Diagnosis-Related Groups\") {\n            return \"DiagnosisRelatedGroup\";\n        } else if (title === \"Ambulatory Payment Classifications\") {\n            return \"AmbulatoryPaymentClassification\";\n        } else if (title === \"Inpatient Charges\") {\n            return \"InpatientCharge\";\n        } else if (title === \"Outpatient Charges\") {\n            return \"OutpatientCharge\";\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the charge description for inpatient procedures.\n     * \n     * @return the charge description\n     */\n    public getInpatientChargeDescription(): InpatientChargeDescription {\n        return new InpatientChargeDescription(\"string\", \"string\", \"number\", \"number\", \"number\");\n    }\n\n    /**\n     * Returns the charge description for outpatient procedures.\n     * \n     * @return the charge description\n     */\n    public getOutpatientChargeDescription(): OutpatientChargeDescription {\n        return new OutpatientChargeDescription(\"string\", \"string\", \"number\", \"number\");\n    }\n\n    /**\n     * Returns the diagnosis-related group object description.\n     * \n     * @return  the diagnosis-related group object description\n     */\n    public getDrgDescription(): DrgDescription {\n        return new DrgDescription(\"number\", \"string\");\n    }\n\n    /**\n     * Returns the ambulatory payment classification object description.\n     * \n     * @return  the ambulatory payment classification object description\n     */\n    public getApcDescription(): ApcDescription {\n        return new ApcDescription(\"number\", \"string\");\n    }\n\n    /**\n     * Fetches endpoint data from the endpoints.json file.\n     * \n     * @return the list of endpoints\n     */\n    public getEndpoints(): Observable<Array<Endpoint>> {\n        return this.http.get<Endpoint[]>(\"./assets/endpoints.json\");\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { EndpointService } from './endpoint.service';\nimport { switchMap } from 'rxjs/operators';\nimport { DiagnosisRelatedGroup } from '../models/diagnosis-related-group.model';\n\n/**\n * Provides inpatient charge data to support example operations.\n */\n@Injectable()\nexport class ExampleService {\n\n  /**\n   * Injects the HttpClient service and the endpoint service.\n   * \n   * @param http the HttpClient object\n   * @param endpointService the endpoint service\n   */\n  constructor(private http: HttpClient, private endpointService: EndpointService) { }\n\n  /**\n   * Retrieves the list of state abbreviations for inpatient charges.\n   * \n   * @return the list of state abbreviations\n   */\n  getInpatientStates(): Observable<string[]> {\n    return this.endpointService.getEndpointUrl(\"Inpatient States\")\n      .pipe(switchMap(url => this.http.get<string[]>(url)));\n  }\n\n  /**\n   * Retrieves the inpatient cities for the given state abbreviation.\n   * \n   * @param state the state abbreviation\n   * @return the list of cities\n   */\n  getInpatientCities(state: string): Observable<string[]> {\n    return this.endpointService.getInpatientCitiesOperativeUrl(state)\n      .pipe(switchMap(url => this.http.get<string[]>(url)));\n  }\n\n  /**\n   * Retrieves the diagnosis-related groups for the given state abbreviation and city.\n   * \n   * @param state the state abbreviation\n   * @param city the city\n   * @return the list of DRGs\n   */\n  getDrgs(state: string, city: string): Observable<DiagnosisRelatedGroup[]> {\n    return this.endpointService.getInpatientDrgsOperativeUrl(state, city)\n      .pipe(switchMap(url => this.http.get<DiagnosisRelatedGroup[]>(url)));\n  }\n\n  /**\n   * Retrieves the inpatient charges for the given state abbreviation, city, and DRG ID.\n   * \n   * @param state the state abbreviation\n   * @param city the city\n   * @param drgId the diagnosis-related group identifier\n   * @return the list of inpatient charges\n   */\n  getInpatientCharges(state: string, city: string, drgId: number): Observable<string[]> {\n    return this.endpointService.getInpatientChargesOperativeUrl(state, city, drgId)\n      .pipe(switchMap(url => this.http.get<string[]>(url)));\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}